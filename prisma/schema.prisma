datasource db {
    provider = "mysql"
    url      = env("DB_URL")
}

generator client {
    provider = "prisma-client-js"
}

model users {
    //id         String   @id @map("_id") @default(auto()) @db.ObjectId
    id                  Int     @id @default(autoincrement())
    email               String
    first_name          String
    last_name           String
    about               String? @db.Text
    password            String
    profile_photo       String? @db.Text
    cover_photo         String? @db.Text
    is_verified         Int @default(0)
    is_artise           Boolean @default(false)
    slug                String?
    receive_notification    Boolean @default(true)
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt @default(now())
    deleted_at          DateTime?
    is_premium          Boolean @default(false)
    // Relationships
    socialProfiles      usersocialprofiles[]
    artistes            artistetofollower[] @relation("FollowerArtistes")
    followers           artistetofollower[] @relation("ArtisteFollowers")
    likedtracks         tracklike[]
    likedDiscussions    discussionlike[]
    discussions         discussions[]
    discussionComments  discussioncomments[]
    likedComments       commentlikes[]
    listenedtracks      tracklisten[]
    tracks              tracks[]
    orders              orders[]
    transactions        transactions[]
    playlists           playlists[]   @relation("UserPlaylists")    // One-to-many relationship with playlists
    subscribedPlaylists playlistsubscribers[] // Many-to-many for subscribed playlists
    fcm_tokens          fcm_tokens[]
    @@unique([email, deleted_at])

}

model otps {
    //id         String   @id @map("_id") @default(auto()) @db.ObjectId
    id         Int      @id @default(autoincrement())
    email      String   @unique
    otp        String
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model app_settings {
    id          Int @id @default(autoincrement())
    subject     String @unique
    data        String @db.Text
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model socials {
    id                  Int @id @default(autoincrement())
    title               String @unique
    logo                String @db.Text
    slug                String @unique
    status              Boolean @default(true)
    usersocialprofiles  usersocialprofiles[]
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model usersocialprofiles {
    id          Int     @id @default(autoincrement())
    url         String
    user_id     Int
    social_id   Int
    user        users   @relation(fields: [user_id], references: [id])
    social      socials @relation(fields: [social_id], references: [id])
    deleted_at  DateTime?
}

model albums{
    id              Int     @id @default(autoincrement())
    title           String
    slug            String
    user_id         Int
    cover           String?
    description     String? @db.Text
    release_date    Int ?
    created_at      DateTime @default(now())
    updated_at      DateTime @updatedAt @default(now())
    deleted_at      DateTime?
    tracks          tracks[]
}

model tracks{
    id              Int @id @default(autoincrement())
    title           String?
    user_id         Int
    artiste         users @relation(fields: [user_id], references: [id])  // Define relation to users model
    slug            String @unique
    duration        String?
    cover           String?
    file            String?
    video_file      String?
    album_id        Int?
    album           albums?   @relation(fields: [album_id], references: [id]) // Optional many-to-one relation to Album
    release_date    String?
    featured        String?
    about           String? @db.Text
    approved        Boolean @default(false)
    rejected        Boolean @default(false)
    genres          tracktogenres[]
    likes           tracklike[]
    listens         tracklisten[]
    playlists       playlisttracks[]   // Many-to-many relation with playlists
    created_at      DateTime @default(now())
    updated_at      DateTime @updatedAt @default(now())
    deleted_at      DateTime?
    // discussion_id   Int?
    discussion      discussions[] @relation(name: "TrackToDiscussions")
    // discussion      discussions @relation(fields: [discussion_id], references: [id])
}

model genres {
  id      Int     @id @default(autoincrement())
  title   String
  slug    String
  tracks  tracktogenres[]
}

model tracktogenres {
  id        Int     @id @default(autoincrement())
  track     tracks  @relation(fields: [track_id], references: [id])
  genre     genres  @relation(fields: [genre_id], references: [id])
  track_id  Int
  genre_id  Int
}

model artistetofollower {
    id          Int    @id @default(autoincrement())

    // Reference to the artiste (a user)
    artiste     users  @relation("ArtisteFollowers", fields: [artiste_id], references: [id])
    artiste_id  Int

    // Reference to the follower (a user)
    follower    users  @relation("FollowerArtistes", fields: [follower_id], references: [id])
    follower_id Int

    created_at  DateTime @default(now())
    deleted_at      DateTime?
}

model tracklike {
    id          Int    @id @default(autoincrement())
    track_id    Int
    user_id     Int
    track       tracks @relation(fields: [track_id], references: [id])
    user        users  @relation(fields: [user_id], references: [id])
    deleted_at  DateTime?
}


model blacklisttoken {
    id Int @id @default(autoincrement())
    token   String @db.Text
    exp     Int
}

model tracklisten {
    id          Int    @id @default(autoincrement())
    track_id    Int
    user_id     Int
    type        String
    duration    Int
    track       tracks @relation(fields: [track_id], references: [id])
    status      String      @default("playing")
    user        users  @relation(fields: [user_id], references: [id])
    created_at  DateTime @default(now())
    updated_at  DateTime    @updatedAt @default(now())
    deleted_at  DateTime?
}

model playlists {
    id              Int                  @id @default(autoincrement())
    title           String
    description     String?              @db.Text
    cover_photo     String?              @db.Text
    owner_id        Int
    owner           users                @relation("UserPlaylists", fields: [owner_id], references: [id]) // Relation to users as owner
    tracks          playlisttracks[]     // Many-to-many relation with tracks
    subscribers     playlistsubscribers[]// Many-to-many for users subscribing to playlist
    created_at      DateTime             @default(now())
    updated_at      DateTime             @updatedAt @default(now())
    deleted_at      DateTime?
}

model playlisttracks {
    id              Int                  @id @default(autoincrement())
    playlist_id     Int
    track_id        Int
    playlist        playlists @relation(fields: [playlist_id], references: [id])
    track           tracks    @relation(fields: [track_id], references: [id])
}

model playlistsubscribers {
    id              Int                  @id @default(autoincrement())
    playlist_id     Int
    user_id         Int
    deleted_at      DateTime?
    playlist        playlists @relation(fields: [playlist_id], references: [id])
    user            users     @relation(fields: [user_id], references: [id])
}

model tags {
    id          Int    @id @default(autoincrement())
    title       String
    slug        String
    discussions tagstodiscussions[]

}

model discussions {
    id          Int    @id @default(autoincrement())
    user_id     Int
    title       String
    body        String @db.Text
    song_id     Int?
    created_at  DateTime @default(now())
    updated_at  DateTime    @updatedAt @default(now())
    deleted_at  DateTime?
    tags        tagstodiscussions[]
    likes       discussionlike[]
    comments    discussioncomments[]
    author      users @relation(fields: [user_id], references: [id])
    track       tracks?   @relation(name: "TrackToDiscussions", fields: [song_id], references: [id]) 
    // track       tracks[]
}

model tagstodiscussions {
    id            Int     @id @default(autoincrement())
    discussion_id  Int
    tag_id  Int
    discussion    discussions  @relation(fields: [discussion_id], references: [id])
    tag           tags  @relation(fields: [tag_id], references: [id])
}

model discussionlike {
    id              Int    @id @default(autoincrement())
    discussion_id   Int
    user_id         Int
    discussion      discussions @relation(fields: [discussion_id], references: [id])
    user            users  @relation(fields: [user_id], references: [id])
    deleted_at      DateTime?
}

model discussioncomments {
    id              Int    @id @default(autoincrement())
    discussion_id   Int
    user_id         Int
    comment         String  @db.Text
    discussion      discussions @relation(fields: [discussion_id], references: [id])
    user            users  @relation(fields: [user_id], references: [id])
    parent          Int?
    likes           commentlikes[]
    parent_comment  discussioncomments? @relation("CommentToReplies", fields: [parent], references: [id])
    replies         discussioncomments[] @relation("CommentToReplies")
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt @default(now())
    deleted_at      DateTime?

}

model commentlikes {
    id              Int    @id @default(autoincrement())
    comment_id   Int
    user_id      Int
    comment      discussioncomments @relation(fields: [comment_id], references: [id])
    user         users  @relation(fields: [user_id], references: [id])
    deleted_at      DateTime?
}

model products {
    id              Int    @id @default(autoincrement())
    name            String
    price           Decimal @db.Decimal(10, 2)
    category_id     Int
    category        product_categories @relation(fields: [category_id], references: [id])
    order           order_products[]
    product_photos  product_photos[]
    created_at      DateTime @default(now())
    updated_at  DateTime @updatedAt @default(now())
    deleted_at      DateTime?
}

model product_categories {
    id          Int @id @default(autoincrement())
    slug        String
    name        String
    products    products[]
}

model product_photos {
    id                  Int @id @default(autoincrement())
    product_id          Int
    file                String @db.Text
    is_cover            Boolean @default(false)
    product             products @relation(fields: [product_id], references: [id])
    deleted_at      DateTime?
}

model orders {
    id              Int    @id @default(autoincrement())
    user_id         Int
    code            String
    status          String?
    user            users  @relation(fields: [user_id], references: [id])
    order_products  order_products[]
    created_at      DateTime @default(now())
    updated_at      DateTime @updatedAt @default(now())
    deleted_at      DateTime?
}

model order_products {
    id              Int @id @default(autoincrement())
    product_id      Int
    order_id        Int
    quantity        Int @default(1)
    amount          Decimal @db.Decimal(10, 2)
    product         products  @relation(fields: [product_id], references: [id])
    order           orders  @relation(fields: [order_id], references: [id])
    deleted_at      DateTime?
}

model transactions {
    id              Int     @id @default(autoincrement())
    description     String
    amount          Decimal @db.Decimal(10, 2)
    payer_email     String
    user_id         Int?
    user            users?  @relation(fields: [user_id], references: [id])
    order_id        Int?
    created_at      DateTime @default(now())
    updated_at      DateTime @updatedAt @default(now())
    deleted_at      DateTime?
}

model studio_bookings {
    id              Int @id @default(autoincrement())
    user_id         Int
    email           String
    phone           String
    fullname        String
    date            String
    time            String
    persons_count   Int
    activities      String
    more_details    String @db.Text
    created_at      DateTime @default(now())
    updated_at      DateTime @updatedAt @default(now())
    deleted_at      DateTime?
}

model admins {
  id                Int       @id @default(autoincrement())
  name              String
  email             String    @unique
  email_verified_at DateTime?
  status            Boolean @default(true)
  password          String
  remember_token    String?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
}

model personal_access_tokens {
  id                Int       @id @default(autoincrement())
  tokenable_type    String
  tokenable_id      Int
  name              String
  token             String    @unique @db.VarChar(64)
  abilities         String?   @db.Text
  last_used_at      DateTime?
  expires_at        DateTime?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  @@index([tokenable_type, tokenable_id]) // Index for morphs
}

model fcm_tokens {
    id          Int      @id @default(autoincrement())
    user_id     Int
    token       String   @unique
    device_info String?  @db.Text // Optional: stores device details (e.g., type, OS, etc.)
    created_at  DateTime @default(now())
    updated_at  DateTime @updatedAt
    user        users    @relation(fields: [user_id], references: [id])
}

model sliders {
    id          Int     @id @default(autoincrement())
    title       String?
    file        String  @db.Text
    screen      String
    device      String
    is_active   Boolean @default(false)
    created_at  DateTime @default(now())
    updated_at  DateTime @updatedAt
}

model screens {
    id      Int     @id @default(autoincrement())
    name    String
}

model device_types {
    id      Int     @id @default(autoincrement())
    name    String
}