datasource db {
    provider = "mysql"
    url      = env("DB_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Users {
    //id         String   @id @map("_id") @default(auto()) @db.ObjectId
    id                  Int     @id @default(autoincrement())
    email               String   @unique
    first_name          String
    last_name           String
    about               String? @db.Text
    password            String
    profile_photo       String? @db.Text
    cover_photo         String? @db.Text
    is_verified         Int @default(0)
    is_artise           Boolean @default(false)
    slug                String?
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt @default(now())
    // Relationships
    socialProfiles      UserSocialProfiles[]
    artistes            ArtisteToFollower[] @relation("FollowerArtistes")
    followers           ArtisteToFollower[] @relation("ArtisteFollowers")
    likedTracks         TrackLike[]
    likedDiscussions    DiscussionLike[]
    discussions         Discussions[]
    discussionComments  DiscussionComments[]
    likedComments       CommentLikes[]
    listenedTracks      TrackListen[]
    tracks              Tracks[]
    orders              orders[]
    transactions        transactions[]
    playlists           Playlists[]   @relation("UserPlaylists")    // One-to-many relationship with Playlists
    subscribedPlaylists PlaylistSubscribers[] // Many-to-many for subscribed playlists
    
}

model Otps {
    //id         String   @id @map("_id") @default(auto()) @db.ObjectId
    id         Int      @id @default(autoincrement())
    email      String   @unique
    otp        String  
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model App_Settings {
    id          Int @id @default(autoincrement())
    subject     String @unique
    data        String @db.Text
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model Socials {
    id                  Int @id @default(autoincrement())
    title               String @unique
    logo                String @db.Text
    slug                String @unique
    userSocialProfiles  UserSocialProfiles[]
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model UserSocialProfiles {
    id        Int     @id @default(autoincrement())
    url       String
    user_id   Int
    social_id Int
    user      Users   @relation(fields: [user_id], references: [id])
    social    Socials @relation(fields: [social_id], references: [id])
}


model Albums{
    id              Int     @id @default(autoincrement())
    title           String
    slug            String
    user_id         Int
    cover           String?
    description     String? @db.Text
    release_date    Int ?
    created_at      DateTime @default(now())
    updated_at      DateTime @updatedAt @default(now())
    tracks          Tracks[]
}

model Tracks{
    id              Int @id @default(autoincrement())
    title           String?
    user_id         Int
    artiste         Users @relation(fields: [user_id], references: [id])  // Define relation to Users model
    slug            String @unique
    duration        String?
    cover           String?
    file            String?
    video_file      String?
    album_id        Int?
    album           Albums?   @relation(fields: [album_id], references: [id]) // Optional many-to-one relation to Album 
    release_date    String?
    featured        String?
    about           String? @db.Text
    genres          TrackToGenres[]
    likes           TrackLike[]
    listens         TrackListen[]
    playlists       PlaylistTracks[]     // Many-to-many relation with Playlists
    created_at      DateTime @default(now())
    updated_at      DateTime @updatedAt @default(now())
}

model Genres {
  id      Int     @id @default(autoincrement())
  title   String
  slug    String
  tracks  TrackToGenres[]
}

model TrackToGenres {
  id        Int     @id @default(autoincrement())
  track     Tracks  @relation(fields: [track_id], references: [id])
  genre     Genres  @relation(fields: [genre_id], references: [id])
  track_id  Int
  genre_id  Int
}

model ArtisteToFollower {
    id          Int    @id @default(autoincrement())
    
    // Reference to the artiste (a user)
    artiste     Users  @relation("ArtisteFollowers", fields: [artiste_id], references: [id])
    artiste_id  Int
    
    // Reference to the follower (a user)
    follower    Users  @relation("FollowerArtistes", fields: [follower_id], references: [id])
    follower_id Int

    created_at  DateTime @default(now())
} 

model TrackLike {
    id          Int    @id @default(autoincrement())
    track_id    Int
    user_id     Int
    track       Tracks @relation(fields: [track_id], references: [id])
    user        Users  @relation(fields: [user_id], references: [id])
}


model BlackListToken {
    id Int @id @default(autoincrement())
    token   String @db.Text
    exp     Int
}


model TrackListen {
    id          Int    @id @default(autoincrement())
    track_id    Int
    user_id     Int
    type        String
    duration    Int
    track       Tracks @relation(fields: [track_id], references: [id])
    status      String      @default("playing")
    user        Users  @relation(fields: [user_id], references: [id])
    created_at  DateTime @default(now())
    updated_at  DateTime    @updatedAt @default(now())
}

model Playlists {
    id              Int                  @id @default(autoincrement())
    title           String
    description     String?              @db.Text
    cover_photo     String?              @db.Text
    owner_id        Int
    owner           Users                @relation("UserPlaylists", fields: [owner_id], references: [id]) // Relation to Users as owner
    tracks          PlaylistTracks[]     // Many-to-many relation with Tracks
    subscribers     PlaylistSubscribers[]// Many-to-many for Users subscribing to playlist
    created_at      DateTime             @default(now())
    updated_at      DateTime             @updatedAt @default(now())
}

model PlaylistTracks {
    id              Int                  @id @default(autoincrement())
    playlist_id     Int
    track_id        Int
    playlist        Playlists @relation(fields: [playlist_id], references: [id])
    track           Tracks    @relation(fields: [track_id], references: [id])
}

model PlaylistSubscribers {
    id              Int                  @id @default(autoincrement())
    playlist_id     Int
    user_id         Int
    playlist        Playlists @relation(fields: [playlist_id], references: [id])
    user            Users     @relation(fields: [user_id], references: [id])
}

model Tags {
    id          Int    @id @default(autoincrement())
    title       String 
    slug        String
    Discussions TagsToDiscussions[]
    
}

model Discussions {
    id          Int    @id @default(autoincrement())
    user_id     Int
    title       String
    body        String @db.Text
    created_at  DateTime @default(now())
    updated_at  DateTime    @updatedAt @default(now())
    tags        TagsToDiscussions[]
    likes       DiscussionLike[]
    comments    DiscussionComments[]
    author      Users @relation(fields: [user_id], references: [id])
}

model TagsToDiscussions {
    id            Int     @id @default(autoincrement())
    discussion_id  Int
    tag_id  Int
    discussion    Discussions  @relation(fields: [discussion_id], references: [id])
    tag           Tags  @relation(fields: [tag_id], references: [id])
    
}

model DiscussionLike {
    id              Int    @id @default(autoincrement())
    discussion_id   Int
    user_id         Int
    discussion      Discussions @relation(fields: [discussion_id], references: [id])
    user            Users  @relation(fields: [user_id], references: [id])
}

model DiscussionComments {
    id              Int    @id @default(autoincrement())
    discussion_id   Int
    user_id         Int
    comment         String  @db.Text
    discussion      Discussions @relation(fields: [discussion_id], references: [id])
    user            Users  @relation(fields: [user_id], references: [id])
    parent          Int?
    likes           CommentLikes[]
    parent_comment  DiscussionComments? @relation("CommentToReplies", fields: [parent], references: [id])
    replies         DiscussionComments[] @relation("CommentToReplies")
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt @default(now())

}

model CommentLikes {
    id              Int    @id @default(autoincrement())
    comment_id   Int
    user_id      Int
    comment      DiscussionComments @relation(fields: [comment_id], references: [id])
    user         Users  @relation(fields: [user_id], references: [id])
}

model products {
    id          Int    @id @default(autoincrement())
    name        String
    price       Decimal @db.Decimal(10, 2)
    orders      orders[]
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt @default(now())
}

model orders {
    id              Int    @id @default(autoincrement())
    product_id      Int
    user_id         Int
    product         products @relation(fields: [product_id], references: [id])
    user            Users  @relation(fields: [user_id], references: [id])
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt @default(now())
}

model transactions {
    id              Int     @id @default(autoincrement())
    description     String
    amount          Decimal @db.Decimal(10, 2)
    payer_email     String
    user_id         Int?
    user            Users?  @relation(fields: [user_id], references: [id])
    order_id        Int?
    created_at      DateTime @default(now())
    updated_at      DateTime @updatedAt @default(now())
}